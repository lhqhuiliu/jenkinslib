#!groovy

@Library('jenkinslib') _            //引用jenkinslibrary

def tools = new org.devops.tools()

String workspace = "/opt/jenkins/workspace"



//pipeline
pipeline {
    agent { node  { label "master"
            customWorkspace "${workspace}"      //指定运行工作目录（可选）
        }
    }
    
//    parameters { string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') }

    
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
        timeout(time:1,unit:'HOURS')
    }
    
    stages {
        //下载代码
        stage("GetCode"){
            when { environment name: 'test', value: 'abcd' }
            steps{
                timeout(time:5, unit:"MINUTES"){
                    script{
                        println('获取代码')
                        println("${test}")
                        
                        input id: 'Test', message: '我们是否要继续？', ok: '是，继续吧！', parameters: [choice(choices: ['a', 'b'], description: '', name: 'test1')], submitter: 'jenkins,admin'
                    }
                }
            }
        }
    
        //构建
        stage("Build"){
            steps{
                timeout(time:20, unit:"MINUTES"){
                    script{
                        println('应用打包')
                         mvnHome = tool "m2"
                        println(mvnHome)
                        sh "${mvnHome}/bin/mvn -version"
                    }
                }
            }
        }
    
        //代码扫描
        stage(“CodeScan”){
            steps{
                timeout(time:30, unit:"MINUTES"){
                    script{
                        print("代码扫描")

                        tools.PrintMes("this is my lib!")
                    }
                }
            }
        }
    }
    
        //构建后操作
    post {
        always {
            script{
                println("always")
            }
        }

        success {
            script{
                currentBuild.description = "\n 构建成功！"
            }
        }

        failure {
            script{
                currentBuild.description = "\n 构建失败！"
            }
        }

        aborted {
            script{
                currentBuild.description = "\n 构建取消!"
            }
        }
    }
}
